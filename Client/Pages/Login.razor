@page "/Login"
<PageTitle>Login</PageTitle>

@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations

@using GestionProyectos.Shared.Models;
@using Microsoft.AspNetCore.Components.Authorization
@using GestionProyectos.Client.Extensions;
@using GestionProyectos.Client.Services.Contrato;
@inject IUsuarioService _usuarioServicio;
@inject NavigationManager _navServicio;
@inject IToastService toastService;
@inject AuthenticationStateProvider autenticacionProvider;
@inject SweetAlertService Swal;


<MudGrid Class="justify-center">

    <MudItem xs="12">
        <MudPaper Class="pa-4">
            <div class="text-center">
                <h2>LOGIN</h2>
            </div>
            <MudForm >
                <MudTextField T="string" Label="Username" @bind-Value="@usuario.NombreUsuario" />
                <MudTextField T="string" Label="Password" @bind-Value="@usuario.Clave"
                              InputType="InputType.Password"  />
                <div class="d-flex align-center justify-space-between">
                    <MudCheckBox T="bool"  Label="Recordarme" />
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="Iniciar">Iniciar Sesion</MudButton>
                </div>
            </MudForm>
        </MudPaper>
    </MudItem>
</MudGrid>

@code{
    private UsuarioDTO usuario = new UsuarioDTO();
    private SesionDTO sesionUsuario = new SesionDTO();

    private async Task Iniciar()
    {
        // usuario.NombreUsuario = "Profe";
        // usuario.Clave = "1234";
        // usuario.IdUsuario = 4;
        // usuario.IdRol = 4;

        // sesionUsuario.Rol = "Administrador";
        // sesionUsuario.NombreCompleto = "Profe";
        // sesionUsuario.IdUsuario = 11;

        var response = await _usuarioServicio.Buscar(usuario);
        if (response is null)
        {
            toastService.ShowError("No se encuentra al usuario, registrese y vuelva a intentar.");
        }
        else
        {
            var autenticacionExt = (AutenticacionExtension)autenticacionProvider;
            await autenticacionExt.ActualizarEstadoAutenticacion(response);

            
            if (response.Rol.ToLower() == "administrador")
            {
                //toastService.ShowSuccess("Inicio exitoso.");
                _navServicio.NavigateTo("/Usuarios/Listado");
                snackbarServicio.Add("Inicio Exitoso",Severity.Info);
            }
            if (!(response.Rol.ToLower() == "administrador"))
            {
                _navServicio.NavigateTo("/");
                //toastService.ShowSuccess("Inicio Sesion sin ser Administrador");
            }

            //await sessionStorage.SetItemAsync("id", usuario.Id);
            //await JsRuntime.InvokeVoidAsync("location.reload");
        }

    }

    


}


@* @code {
    bool success;
    string[] errors = { };
    MudTextField<string> pwField1;
    MudForm form;

    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Password is required!";
            yield break;
        }
        if (pw.Length < 8)
            yield return "Password must be at least of length 8";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "Password must contain at least one capital letter";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "Password must contain at least one lowercase letter";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "Password must contain at least one digit";
    }

    private string PasswordMatch(string arg)
    {
        if (pwField1.Value != arg)
            return "Passwords don't match";
        return null;
    }

} *@