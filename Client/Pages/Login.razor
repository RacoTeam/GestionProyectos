@page "/Login"
<PageTitle>Login</PageTitle>

@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations

@using CurrieTechnologies.Razor.SweetAlert2;
@using GestionProyectos.Shared.Models;
@using Microsoft.AspNetCore.Components.Authorization
@using GestionProyectos.Client.Extensions;
@using GestionProyectos.Client.Services.Contrato;

@inject IUsuarioService _usuarioServicio;
@inject NavigationManager _navServicio;
@inject ISnackbar Snackbar;
@inject AuthenticationStateProvider autenticacionProvider;
@inject SweetAlertService Swal;

<EditForm Model="@inicioSesion" OnValidSubmit="OnValidSubmit" OnInvalidSubmit="OnInvalidSubmit" FormName="LoginForm">
<DataAnnotationsValidator/>
    <MudGrid Class="justify-center">
        <MudItem xs="12">
            <MudCard>
                <MudCardContent>
                    <MudTextField T="string" Label="Usuario" @bind-Value="inicioSesion.Usuario" For="@(() => inicioSesion.Usuario)" />
                    <MudTextField T="string" Label="Contraseña" @bind-Value="inicioSesion.Clave" For="@(() => inicioSesion.Clave)"
                                  InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="ButtonTestclick" AdornmentAriaLabel="Show Password" />
                </MudCardContent>
                <MudCardActions>
                    @* <MudCheckBox T="bool"  Label="Recordarme" @bind-Value="recordar"/> *@
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Iniciar Sesion</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
        <MudItem xs="12" Class="text-center">
            @if (loader)
            {
                <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
            }
        </MudItem>
    </MudGrid>
</EditForm>

@code{
    private InicioSesion inicioSesion = new InicioSesion();
    private SesionDTO sesionUsuarioDTO = new SesionDTO();

    bool success = false;
    bool recordar = false;

    bool loader = false;

    public class InicioSesion
    {
        [Required(ErrorMessage = "El campo Nombre de Usuario es requerido")]
        public string Usuario { get; set; } = "";

        [Required(ErrorMessage = "El campo Contraseña es requerido")]
        public string Clave { get; set; } = "";
    }

    public string Password { get; set; } = "superstrong123";

    bool isShow;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    void ButtonTestclick()
    {
        @if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }

    private async void OnValidSubmit(EditContext context)
    {
        // usuario.NombreUsuario = "Profe";
        // usuario.Clave = "1234";
        // usuario.IdUsuario = 4;
        // usuario.IdRol = 4;

        // sesionUsuario.Rol = "Administrador";
        // sesionUsuario.NombreCompleto = "Profe";
        // sesionUsuario.IdUsuario = 11;
        success = true;
        loader = true;
        StateHasChanged();

        try
        {
            var response = await _usuarioServicio.Buscar(inicioSesion.Usuario, inicioSesion.Clave);

            // Si se encuentra al usuario:
            if (response.Rol.ToLower() == "administrador")
            {
                var autenticacionExt = (AutenticacionExtension)autenticacionProvider;
                await autenticacionExt.ActualizarEstadoAutenticacion(response);
                _navServicio.NavigateTo("/Usuarios/Listado");
            }
            else
            {
                Snackbar.Add("Usuario no tiene el rol requerido para el ingreso", Severity.Warning);
            }

            Snackbar.Add("Inicio Exitoso", Severity.Success);
        }
        catch
        {
            // Si no encuentra al usuario:
            Snackbar.Add("Usuario y/o contraseña incorrectos", Severity.Error);
        }

        loader = false;
}
    private void OnInvalidSubmit(EditContext context)
    {
        Console.WriteLine($"Invalido. Usuario: {inicioSesion.Usuario} Clave: {inicioSesion.Clave} Context: {context}");
    }
}


@* @code {
    bool success;
    string[] errors = { };
    MudTextField<string> pwField1;
    MudForm form;

    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Password is required!";
            yield break;
        }
        if (pw.Length < 8)
            yield return "Password must be at least of length 8";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "Password must contain at least one capital letter";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "Password must contain at least one lowercase letter";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "Password must contain at least one digit";
    }

    private string PasswordMatch(string arg)
    {
        if (pwField1.Value != arg)
            return "Passwords don't match";
        return null;
    }

} *@