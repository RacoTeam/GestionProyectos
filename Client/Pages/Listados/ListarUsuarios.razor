@page "/Usuarios"
<PageTitle>Listado de Usuarios</PageTitle>

@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations

@using System.Net.Http.Json
@using MudBlazor

@using GestionProyectos.Shared.Models
@using GestionProyectos.Client.Services.Contrato

@inject IUsuarioService _usuarioServicio
@inject HttpClient httpClient
@inject ISnackbar Snackbar

@inject NavigationManager _navManager

@attribute [Authorize(Roles = "Administrador")]

<MudButton Href="/Usuarios/agregar/0"
           Variant="Variant.Filled"
           EndIcon="@Icons.Material.Filled.AddCircle"
           Color="Color.Primary" Class="mb-2">
    Agregar Usuario
</MudButton>

<MudTable Items="@UsuarioDTOs" Dense="@dense" Hover="@hover" ReadOnly="false" CanCancelEdit="@canCancelEdit" Filter="new Func<UsuarioDTO,bool>(FilterFunc)"
          @bind-SelectedItem="selectedItem1" SortLabel="Ordenar por" EditTrigger="TableEditTrigger.EditButton">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Listado de Usuarios</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Buscar" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <ColGroup>
        <col style="width:50px;" />
        <col style="width:80px;" />
        <col style="width:50%;" />
        <col />
        <col />
        <col style="width:50px;" />
        <col style="width:50px;" />
    </ColGroup>
    <HeaderContent>
        <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<UsuarioDTO, object>(x=>x.IdUsuario)">ID</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<UsuarioDTO, object>(x=>x.NombreUsuario)">Usuario</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<UsuarioDTO, object>(x=>x.Clave)">Clave</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<UsuarioDTO, object>(x=>x.Nombre)">Nombre</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<UsuarioDTO, object>(x=>x.Apellido)">Apellido</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<UsuarioDTO, object>(x=>x.Dni)">Dni</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<UsuarioDTO, object>(x=>x.IdRolNavigation.Nombre)">Rol</MudTableSortLabel></MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="ID">@context.IdUsuario</MudTd>
        <MudTd DataLabel="NombreUsuario">@context.NombreUsuario</MudTd>
        <MudTd DataLabel="Clave">@context.Clave</MudTd>
        <MudTd DataLabel="Nombre">@context.Nombre</MudTd>
        <MudTd DataLabel="Apellido">@context.Apellido</MudTd>
        <MudTd DataLabel="Dni">@context.Dni</MudTd>
        <MudTd DataLabel="Rol">@context.IdRolNavigation.Nombre</MudTd>
        <MudTd><MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" Class="pa-0" OnClick="() => ModificarUsuario(context.IdUsuario)" /></MudTd>
        <MudTd><MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Delete" Class="pa-0" OnClick="() => EliminarUsuario(context.IdUsuario)" /></MudTd>
    </RowTemplate>

    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

<MudSwitch @bind-Checked="@dense" Color="Color.Secondary">Dense</MudSwitch>

@code {
    private List<string> editEvents = new();
    private bool dense = false;
    private bool hover = true;
    private bool ronly = false;
    private bool canCancelEdit = false;
    private bool blockSwitch = false;
    private string searchString = "";
    private UsuarioDTO selectedItem1 = null;

    private HashSet<UsuarioDTO> selectedItems1 = new HashSet<UsuarioDTO>();

    private IEnumerable<UsuarioDTO> UsuarioDTOs = new List<UsuarioDTO>();

    protected override async Task OnInitializedAsync()
    {
        UsuarioDTOs = await _usuarioServicio.ListarUsuarios();
    }

    private bool FilterFunc(UsuarioDTO UsuarioDTO)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (UsuarioDTO.Nombre.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (UsuarioDTO.NombreUsuario.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (UsuarioDTO.IdUsuario.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (UsuarioDTO.IdRolNavigation.Nombre.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{UsuarioDTO.IdRolNavigation.Nombre} {UsuarioDTO.Nombre}".Contains(searchString))
            return true;
        return false;
    }

    private void ModificarUsuario(int id)
    {
        _navManager.NavigateTo($"/Usuarios/modificar/{id}");
    }

    private void EliminarUsuario(int id)
    {
        _navManager.NavigateTo($"/Usuarios/eliminar/{id}");
    }
}