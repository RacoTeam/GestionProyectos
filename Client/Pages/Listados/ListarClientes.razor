@page "/Clientes"
<PageTitle>Listado de Usuarios</PageTitle>

@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations

@using System.Net.Http.Json
@using MudBlazor

@using GestionProyectos.Shared.Models
@using GestionProyectos.Client.Services.Contrato

@inject IClienteService _clienteServicio
@inject HttpClient httpClient
@inject ISnackbar Snackbar

@inject NavigationManager _navManager

@attribute [Authorize(Roles = "Administrador")]

<MudButton Href="/Clientes/agregar/0"
           Variant="Variant.Filled"
           EndIcon="@Icons.Material.Filled.AddCircle"
           Color="Color.Primary" Class="mb-2">
    Agregar Cliente
</MudButton>

<MudTable Items="@ClienteDTOs" Dense="@dense" Hover="@hover" ReadOnly="false" CanCancelEdit="@canCancelEdit" Filter="new Func<ClienteDTO,bool>(FilterFunc)"
    @bind-SelectedItem="selectedItem1" SortLabel="Ordenar por" EditTrigger="TableEditTrigger.EditButton">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Listado de Clientes</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Buscar" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <ColGroup>
        <col style="width:50px;" />
        <col style="width:80px;" />
@*         <col />
        <col /> *@
        <col style="width:50px;" />
        <col style="width:50px;" />
    </ColGroup>
    <HeaderContent>
        <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<ClienteDTO, object>(x=>x.IdCliente)">ID</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<ClienteDTO, object>(x=>x.Nombre)">Nombre</MudTableSortLabel></MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="ID">@context.IdCliente</MudTd>
        <MudTd DataLabel="Nombre">@context.Nombre</MudTd>
        <MudTd><MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" Class="pa-0" OnClick="() => ModificarCliente(context.IdCliente)" /></MudTd>
        <MudTd><MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Delete" Class="pa-0" OnClick="() => EliminarCliente(context.IdCliente)" /></MudTd>
    </RowTemplate>

    <PagerContent>
        <MudTablePager />
    </PagerContent>
 </MudTable>

 <MudSwitch @bind-Checked="@dense" Color="Color.Secondary">Dense</MudSwitch>

@code {
    private List<string> editEvents = new();
    private bool dense = false;
    private bool hover = true;
    private bool ronly = false;
    private bool canCancelEdit = false;
    private bool blockSwitch = false;
    private string searchString = "";
    private ClienteDTO selectedItem1 = null;

    private HashSet<ClienteDTO> selectedItems1 = new HashSet<ClienteDTO>();

    private IEnumerable<ClienteDTO> ClienteDTOs = new List<ClienteDTO>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            ClienteDTOs = await _clienteServicio.ListarClientes();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
        
    }

    private bool FilterFunc(ClienteDTO ClienteDTO)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (ClienteDTO.Nombre.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (ClienteDTO.IdCliente.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private void ModificarCliente(int id)
    {
        _navManager.NavigateTo($"/Clientes/modificar/{id}");
    }

    private void EliminarCliente(int id)
    {
        _navManager.NavigateTo($"/Clientes/eliminar/{id}");
    }
}