@page "/Usuarios/{action}/{IdUsuario:int}"

<PageTitle>Usuario</PageTitle>

@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations

@using CurrieTechnologies.Razor.SweetAlert2;
@using GestionProyectos.Shared.Models;
@using GestionProyectos.Client.Services.Contrato;

@inject IUsuarioService _usuarioServicio;
@inject IRolService _rolServicio;

@inject NavigationManager _navManager;
@inject ISnackbar Snackbar;

@using GestionProyectos.Client.Shared.MultiSelectAutoComplete;

@if (Action.ToLower().Contains("agregar"))
{
    <EditForm Model="@usuarioDTO" OnSubmit="OnSubmitUsuario" FormName="AgregarUsuarioForm">
        <DataAnnotationsValidator />
        <MudGrid Justify="Justify.Center">
            <MudItem xs="12" sm="7">
                <MudPaper Class="pa-4">
                    <MudStack Spacing="3">
                        <MudText Typo="Typo.h4">Agregar Usuario</MudText>
                        <MudItem>
                            <MudTextField T="string" Label="NombreUsuario" @bind-Value="usuarioDTO.NombreUsuario" For="@(() => usuarioDTO.NombreUsuario)" Variant="Variant.Outlined" />
                        </MudItem>

                        <MudItem>
                            <MudTextField T="string" Label="Clave" @bind-Value="usuarioDTO.Clave" For="@(() => usuarioDTO.Clave)" Variant="Variant.Outlined" />
                        </MudItem>

                        <MudItem>
                            <MudTextField T="string" Label="Nombre" @bind-Value="usuarioDTO.Nombre" For="@(() => usuarioDTO.Nombre)" Variant="Variant.Outlined" />
                        </MudItem>

                        <MudItem>
                            <MudTextField T="string" Label="Apellido" @bind-Value="usuarioDTO.Apellido" For="@(() => usuarioDTO.Apellido)" Variant="Variant.Outlined" />
                        </MudItem>

                        <MudItem>
                            <MudTextField T="string" Label="Dni" @bind-Value="usuarioDTO.Dni" For="@(() => usuarioDTO.Dni)" Variant="Variant.Outlined" />
                        </MudItem>

                        <MudItem>
                            <MudTextField T="int?" Label="IdRol" @bind-Value="usuarioDTO.IdRol" For="@(() => usuarioDTO.IdRol)" Variant="Variant.Outlined" />
                        </MudItem>


                        <MudCardActions>
                            <MudButton ButtonType="ButtonType.Button" Href="/Usuarios/" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Cancel" Color="Color.Error" Class="ml-auto">Cancelar</MudButton>
                            <MudButton ButtonType="ButtonType.Submit" Disabled="@_processing" Variant="Variant.Filled" Class="ml-auto" StartIcon="@Icons.Material.Filled.Save" Color="Color.Info">
                                @if (_processing)
                                {
                                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                                    <MudText Class="ms-2">Procesando</MudText>
                                }
                                else
                                {
                                    <MudText>Agregar Usuario</MudText>
                                }
                            </MudButton>
                        </MudCardActions>
                    </MudStack>
                </MudPaper>
                @* <ValidationSummary /> *@
            </MudItem>
        </MudGrid>
    </EditForm>
}

@if (Action.ToLower().Contains("modificar"))
{
    <EditForm Model="@usuarioDTO" OnSubmit="OnSubmitUsuario" FormName="ModificarUsuarioForm">
        <DataAnnotationsValidator />
        <MudGrid Justify="Justify.Center">
            <MudItem xs="12" sm="7">
                <MudPaper Class="pa-4">
                    <MudStack Spacing="3">
                        <MudText Typo="Typo.h4">Modificar Usuario</MudText>
                        <MudItem>
                            <MudTextField T="string" Label="NombreUsuario" @bind-Value="usuarioDTO.NombreUsuario" For="@(() => usuarioDTO.NombreUsuario)" Variant="Variant.Outlined" />
                        </MudItem>

                        <MudItem>
                            <MudTextField T="string" Label="Clave" @bind-Value="usuarioDTO.Clave" For="@(() => usuarioDTO.Clave)" Variant="Variant.Outlined" />
                        </MudItem>

                        <MudItem>
                            <MudTextField T="string" Label="Nombre" @bind-Value="usuarioDTO.Nombre" For="@(() => usuarioDTO.Nombre)" Variant="Variant.Outlined" />
                        </MudItem>

                        <MudItem>
                            <MudTextField T="string" Label="Apellido" @bind-Value="usuarioDTO.Apellido" For="@(() => usuarioDTO.Apellido)" Variant="Variant.Outlined" />
                        </MudItem>

                        <MudItem>
                            <MudTextField T="string" Label="Dni" @bind-Value="usuarioDTO.Dni" For="@(() => usuarioDTO.Dni)" Variant="Variant.Outlined" />
                        </MudItem>

                        <MudItem>
                            <MudTextField T="int?" Label="IdRol" @bind-Value="usuarioDTO.IdRol" For="@(() => usuarioDTO.IdRol)" Variant="Variant.Outlined" />
                        </MudItem>
                        

                        <MudCardActions>
                            <MudButton ButtonType="ButtonType.Button" Href="/Usuarios/" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Cancel" Color="Color.Error" Class="ml-auto">Cancelar</MudButton>
                            <MudButton ButtonType="ButtonType.Submit" Disabled="@(_loader || _processing)" Variant="Variant.Filled" Class="ml-auto" StartIcon="@Icons.Material.Filled.Save" Color="Color.Info">
                                @if (_processing)
                                {
                                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                                    <MudText Class="ms-2">Procesando</MudText>
                                }
                                else
                                {
                                    <MudText>Modificar Usuario</MudText>
                                }
                            </MudButton>
                        </MudCardActions>
                    </MudStack>
                </MudPaper>
                <MudItem xs="12" Class="text-center">
                    @if (_loader)
                    {
                        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                    }
                </MudItem>
                @* <ValidationSummary /> *@
            </MudItem>
        </MudGrid>
    </EditForm>
}

@if (Action.ToLower().Contains("eliminar"))
{
    <EditForm Model="@usuarioDTO" OnSubmit="OnSubmitUsuario" FormName="ModificarUsuarioForm">
        <DataAnnotationsValidator />
        <MudGrid Justify="Justify.Center">
            <MudItem xs="12" sm="7">
                <MudPaper Class="pa-4">
                    <MudStack Spacing="3">
                        <MudText Typo="Typo.h4">Eliminar Usuario</MudText>
                        <MudItem>
                            <MudTextField T="string" Label="Nombre de Usuario" @bind-Value="usuarioDTO.NombreUsuario" For="@(() => usuarioDTO.NombreUsuario)" ReadOnly="true" Variant="Variant.Outlined" />
                        </MudItem>

                        <MudItem>
                            <MudTextField T="string" Label="Clave" @bind-Value="usuarioDTO.Clave" For="@(() => usuarioDTO.Clave)" ReadOnly="true" Variant="Variant.Outlined" />
                        </MudItem>

                        <MudItem>
                            <MudTextField T="string" Label="Nombre" @bind-Value="usuarioDTO.Nombre" For="@(() => usuarioDTO.Nombre)" ReadOnly="true" Variant="Variant.Outlined" />
                        </MudItem>

                        <MudItem>
                            <MudTextField T="string" Label="Apellido" @bind-Value="usuarioDTO.Apellido" For="@(() => usuarioDTO.Apellido)" ReadOnly="true" Variant="Variant.Outlined" />
                        </MudItem>

                        <MudItem>
                            <MudTextField T="string" Label="Dni" @bind-Value="usuarioDTO.Dni" For="@(() => usuarioDTO.Dni)" ReadOnly="true" Variant="Variant.Outlined" />
                        </MudItem>

                        <MudItem>
                            <MudTextField T="int?" Label="IdRol" @bind-Value="usuarioDTO.IdRol" For="@(() => usuarioDTO.IdRol)" ReadOnly="true" Variant="Variant.Outlined" />
                        </MudItem>

                        <MudCardActions>
                            <MudButton ButtonType="ButtonType.Submit" Disabled="@(_loader || _processing)" Variant="Variant.Filled" Class="ml-auto" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error">
                                @if (_processing)
                                {
                                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                                    <MudText Class="ms-2">Procesando</MudText>
                                }
                                else
                                {
                                    <MudText>Eliminar Usuario</MudText>
                                }
                            </MudButton>
                            <MudButton ButtonType="ButtonType.Button" Href="/Usuarios/" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Cancel" Color="Color.Info" Class="ml-auto">Cancelar</MudButton>
                        </MudCardActions>
                    </MudStack>
                </MudPaper>
                <MudItem xs="12" Class="text-center">
                    @if (_loader)
                    {
                        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                    }
                </MudItem>
                @* <ValidationSummary /> *@
            </MudItem>
        </MudGrid>
    </EditForm>
}



@code {
    private UsuarioDTO usuarioDTO = new UsuarioDTO();

    [Parameter] public string Action { get; set; }
    [Parameter] public int IdUsuario { get; set; } = 0;

    string variable = "";

    private bool _processing = false;

    private bool _loader = false;

    //private bool _errorUsuario = false;

    private List<UsuarioDTO> listaUsuarios = new List<UsuarioDTO>();
    private List<RolDTO> listaRoles = new List<RolDTO>();

    private async Task<IEnumerable<UsuarioDTO>> SearchUsuarios(string value)
    {
        await Task.Delay(5);
        return string.IsNullOrEmpty(value) ? listaUsuarios : listaUsuarios.Where(u => u.Nombre.Contains(value, StringComparison.OrdinalIgnoreCase) || u.Apellido.Contains(value, StringComparison.OrdinalIgnoreCase) || u.IdRolNavigation.Nombre.Contains(value, StringComparison.OrdinalIgnoreCase));
    }

    // private async Task<IEnumerable<UsuarioDTO>> SearchUsuarios(string value)
    // {
    //     await Task.Delay(5);
    //     return string.IsNullOrEmpty(value) ? listaUsuarios : listaUsuarios.Where(c => c.Nombre.Contains(value, StringComparison.OrdinalIgnoreCase));
    // }

    protected async override void OnInitialized()
    {
        _loader = true;
        if (Action.Contains("eliminar") || Action.Contains("modificar"))
        {
            try
            {
                usuarioDTO = await _usuarioServicio.ObtenerUsuario(IdUsuario);
                _loader = false;

                StateHasChanged();
            }
            catch (Exception ex)
            {
                Snackbar.Add(ex.Message, Severity.Error);
                _navManager.NavigateTo("/usuarios/");
            }
        }
        base.OnInitialized();
    }


    void OnSubmitUsuario(EditContext editContext)
    {
        if (editContext.Validate())
        {
            if (Action.ToLower().Contains("agregar")) AgregarUsuario();
            else if (Action.ToLower().Contains("modificar")) ModificarUsuario();
            else if (Action.ToLower().Contains("eliminar")) EliminarUsuario();
        }
        else
        {
            Snackbar.Add("Chequeé todos los campos", Severity.Warning);
        }
    }

    private async void AgregarUsuario()
    {
        try
        {
            var response = await _usuarioServicio.AgregarUsuario(usuarioDTO);

            if (response != null)
            {
                Snackbar.Add("Se agregó el usuario", Severity.Success);
                _navManager.NavigateTo("/usuarios/");
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private async void ModificarUsuario()
    {
        try
        {
            var response = await _usuarioServicio.AgregarModificarUsuario(IdUsuario,usuarioDTO);

            if (response != null)
            {
                Snackbar.Add("Se modificó el usuario", Severity.Success);
                _navManager.NavigateTo("/usuarios/");
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private async void EliminarUsuario()
    {
        try
        {
            var response = await _usuarioServicio.EliminarUsuario(usuarioDTO.IdUsuario);

            if (response != null)
            {
                Snackbar.Add("Se eliminó el usuario", Severity.Success);
                _navManager.NavigateTo("/usuarios/");
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }
}