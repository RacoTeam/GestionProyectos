@page "/Tareas/{action}/{IdTarea:int}"
@page "/Tareas/{action}/proyecto/{IdProyecto:int}"
<PageTitle>Tarea</PageTitle>

@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations

@using CurrieTechnologies.Razor.SweetAlert2;
@using GestionProyectos.Shared.Models;
@using GestionProyectos.Client.Services.Contrato;
@using GestionProyectos.Client.Shared.MultiSelectAutoComplete;

@inject ITareaService _tareaServicio;
@inject IUsuarioGrupoService _usuariogrupoServicio;
@inject IUsuarioService _usuarioServicio;
@inject NavigationManager _navManager;
@inject ISnackbar Snackbar;

@if (Action.ToLower().Contains("agregar"))
{
    <EditForm Model="@tareaDTO" OnSubmit="OnSubmitTarea" FormName="AgregarTareaForm">
        <DataAnnotationsValidator />
        <MudGrid Justify="Justify.Center">
            <MudItem xs="12" sm="7">
                <MudPaper Class="pa-4">
                    <MudStack Spacing="3">
                        <MudText Typo="Typo.h4">Agregar Tarea</MudText>
                        <MudItem>
                            <MudTextField T="string" Label="Nombre" Disabled="@_loader" @bind-Value="tareaDTO.Nombre" For="@(() => tareaDTO.Nombre)" Variant="Variant.Outlined" />
                        </MudItem>
                        <MudItem>
                            <MudTextField T="string" Label="Descripción" Disabled="@_loader" @bind-Value="tareaDTO.Descripcion" For="@(() => tareaDTO.Descripcion)" Variant="Variant.Outlined" Lines="3" />
                        </MudItem>

                        <MudGrid>
                            <MudItem xs="6">
                                <MudDatePicker Label="Fecha de Inicio" Editable="true" Disabled="@_loader" @bind-Date="tareaDTO.FechaInicio" For="@(() => tareaDTO.FechaInicio)" Variant="Variant.Outlined" Placeholder="Selecciona una fecha" DisableToolbar="true" ShowWeekNumbers="true" />
                            </MudItem>
                            <MudItem xs="6">
                                <MudDatePicker Label="Fecha de Finalización" Editable="true" Disabled="@_loader" @bind-Date="tareaDTO.FechaFin" For="@(() => tareaDTO.FechaFin)" Variant="Variant.Outlined" Placeholder="Selecciona una fecha" DisableToolbar="true" ShowWeekNumbers="true" />
                            </MudItem>
                        </MudGrid>

                        <MudItem>
                            <MudTextField T="double?" Label="Avance" @bind-Value="tareaDTO.Avance" Disabled="@_loader" For="@(() => tareaDTO.Avance)" Variant="Variant.Outlined" />
                        </MudItem>

                        <MultiSelectAutoComplete T="UsuarioDTO" @bind-Values="usuariosSeleccionados"
                                                     SearchFunc="SearchUsuarios" Label= "Asignar usuarios"
                                                     GetIDFunc="c => c.IdUsuario"
                                                 GetNameFunc="c => (c.Nombre, c.Apellido)"
                                                 Disabled="@_loader"/>

                        <MudCardActions>
                            <MudButton ButtonType="ButtonType.Button" Href="/Tareas/" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Cancel" Color="Color.Error" Class="ml-auto">Cancelar</MudButton>
                            <MudButton ButtonType="ButtonType.Submit" Disabled="@(_processing || _loader)" Variant="Variant.Filled" Class="ml-auto" StartIcon="@Icons.Material.Filled.Save" Color="Color.Info">
                                @if (_processing)
                                {
                                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                                    <MudText Class="ms-2">Procesando</MudText>
                                }
                                else
                                {
                                    <MudText>Agregar Tarea</MudText>
                                }
                            </MudButton>
                        </MudCardActions>
                    </MudStack>
                </MudPaper>
                <MudItem xs="12" Class="text-center">
                    @if (_loader)
                    {
                        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                    }
                </MudItem>
            </MudItem>
        </MudGrid>
    </EditForm>
}
@*
@if (Action.ToLower().Contains("modificar"))
{
    <EditForm Model="@tareaDTO" OnSubmit="OnSubmitTarea" FormName="ModificarTareaForm">
        <DataAnnotationsValidator />
        <MudGrid Justify="Justify.Center">
            <MudItem xs="12" sm="7">
                <MudPaper Class="pa-4">
                    <MudStack Spacing="3">
                        <MudText Typo="Typo.h4">Modificar Tarea</MudText>
                        <MudItem>
                            <MudTextField T="string" Label="Nombre" @bind-Value="tareaDTO.Nombre" For="@(() => tareaDTO.Nombre)" Disabled="@_loader" Variant="Variant.Outlined" />
                        </MudItem>
                        <MudItem>
                            <MudTextField T="string" Label="Descripción" @bind-Value="tareaDTO.Descripcion" For="@(() => tareaDTO.Descripcion)" Disabled="@_loader" Variant="Variant.Outlined" Lines="3" />
                        </MudItem>

                        <MudGrid>
                            <MudItem xs="6">
                                <MudDatePicker Label="Fecha de Inicio" Editable="true" @bind-Date="tareaDTO.FechaInicio" For="@(() => tareaDTO.FechaInicio)" Disabled="@_loader" Variant="Variant.Outlined" Placeholder="Selecciona una fecha" DisableToolbar="true" ShowWeekNumbers="true" />
                            </MudItem>
                            <MudItem xs="6">
                                <MudDatePicker Label="Fecha de Finalización" Editable="true" @bind-Date="tareaDTO.FechaFin" For="@(() => tareaDTO.FechaFin)" Disabled="@_loader" Variant="Variant.Outlined" Placeholder="Selecciona una fecha" DisableToolbar="true" ShowWeekNumbers="true" />
                            </MudItem>
                        </MudGrid>

                        <MudGrid>
                            <MudItem xs="6">
                                <MudAutocomplete T="UsuarioDTO" Label="Usuario" Error="@_errorUsuario" @onclick="@(() => _errorUsuario = false)" @bind-Value="tareaDTO.IdUsuarioNavigation" For="@(() => tareaDTO.IdUsuarioNavigation)"
                                                 Disabled="@_loader"
                                                 SearchFunc="@SearchUsuarios" ToStringFunc="@(u=> u==null?null : $"{u.Nombre} {u.Apellido} ({(u.IdRolNavigation?.Nombre != null ? u.IdRolNavigation?.Nombre : "Sin Rol")})")">
                                    <NoItemsTemplate>
                                        <MudText Align="Align.Center" Class="px-4 py-1">
                                            No se encontraron usuarios
                                        </MudText>
                                        <div class="pa-2">
                                            <MudButton Href="/Usuarios/agregar/0" Color="Color.Primary">Añadir Usuario</MudButton>
                                        </div>
                                    </NoItemsTemplate>
                                    <AfterItemsTemplate>
                                        <div class="pa-2">
                                            <MudButton Href="/Usuarios/agregar/0" Color="Color.Primary">Añadir Usuario</MudButton>
                                        </div>
                                    </AfterItemsTemplate>
                                </MudAutocomplete>
                            </MudItem>

                            <MudItem xs="6">
                                <MudAutocomplete T="ClienteDTO" Label="Cliente" Error="@_errorCliente" @onclick="@(() => _errorCliente = false)" @bind-Value="tareaDTO.IdClienteNavigation" For="@(() => tareaDTO.IdClienteNavigation)"
                                                 Disabled="@_loader"
                                                 SearchFunc="@SearchClientes" ToStringFunc="@(c=> c==null?null : $"{c.Nombre}")">
                                    <NoItemsTemplate>
                                        <MudText Align="Align.Center" Class="px-4 py-1">
                                            No se encontraron usuarios
                                        </MudText>
                                        <div class="pa-2">
                                            <MudButton Href="/Clientes/agregar/0" Color="Color.Primary">Añadir Cliente</MudButton>
                                        </div>
                                    </NoItemsTemplate>
                                    <AfterItemsTemplate>
                                        <div class="pa-2">
                                            <MudButton Href="/Clientes/agregar/0" Color="Color.Primary">Añadir Cliente</MudButton>
                                        </div>
                                    </AfterItemsTemplate>
                                </MudAutocomplete>
                            </MudItem>
                        </MudGrid>

                        <MudCardActions>
                            <MudButton ButtonType="ButtonType.Button" Href="/Tareas/" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Cancel" Color="Color.Error" Class="ml-auto">Cancelar</MudButton>
                            <MudButton ButtonType="ButtonType.Submit" Disabled="@(_loader || _processing)" Variant="Variant.Filled" Class="ml-auto" StartIcon="@Icons.Material.Filled.Save" Color="Color.Info">
                                @if (_processing)
                                {
                                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                                    <MudText Class="ms-2">Procesando</MudText>
                                }
                                else
                                {
                                    <MudText>Modificar Tarea</MudText>
                                }
                            </MudButton>
                        </MudCardActions>
                    </MudStack>
                </MudPaper>
                <MudItem xs="12" Class="text-center">
                    @if (_loader)
                    {
                        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                    }
                </MudItem>
            </MudItem>
        </MudGrid>
    </EditForm>
}
*@
@if (Action.ToLower().Contains("eliminar"))
{

}

@* <MultiSelectAutoComplete T="TestItem" @bind-Values="SelectedGrupos"
                         SearchFunc="MySearchFunc"
                         GetIDFunc="c => c.Id" GetNameFunc="c => c.DisplayName" /> *@

@code {
    private TareaDTO tareaDTO = new TareaDTO();

    [Parameter] public string? Action { get; set; }
    [Parameter] public int IdProyecto { get; set; } = 0;
    [Parameter] public int IdTarea { get; set; } = 0;

    string variable = "";

    private bool _processing = false;

    private bool _loader = false;

    private bool _errorUsuario = false;
    private bool _errorCliente = false;

    int? idProyectoDeTarea;

    private List<UsuarioDTO> listaUsuarios = new List<UsuarioDTO>();
    public IEnumerable<UsuarioDTO> usuariosSeleccionados = new List<UsuarioDTO>();

    public IEnumerable<UsuarioDTO> usuariosRelacionados = new List<UsuarioDTO>();

    public async Task<IEnumerable<UsuarioDTO>> SearchUsuarios(string search)
    {
        if (string.IsNullOrWhiteSpace(search))
        {
            return usuariosRelacionados;
        }

        return await Task.FromResult(usuariosRelacionados.Where(u => u.NombreUsuario.Contains(search, StringComparison.OrdinalIgnoreCase)));
    }

    protected async override void OnInitialized()
    {
        _loader = true;

        if (Action.Contains("agregar"))
        {
            tareaDTO.IdProyecto = IdProyecto;
        }
        else if (Action.Contains("eliminar") || Action.Contains("modificar"))
        {
            try
            {
                tareaDTO = await _tareaServicio.ObtenerTarea(IdTarea);
                idProyectoDeTarea = tareaDTO.IdProyecto;
            }
            catch (Exception ex)
            {
                Snackbar.Add(ex.Message, Severity.Error);
                _navManager.NavigateTo("/clientes/");
            }
        }

        idProyectoDeTarea = tareaDTO.IdProyecto;

        try
        {
            var listaUsuarios = await _usuarioServicio.ListarUsuarios();
            var listaUsuariosGrupos = await _usuariogrupoServicio.ListarUsuarioGrupos();

            // 1. Filtra los UsuarioGrupos por el IdProyecto
            var usuarioGruposEnProyecto = listaUsuariosGrupos.Where(ug => ug.IdProyecto == idProyectoDeTarea).ToList();

            // 2. Extrae los IdUsuario de los UsuarioGrupoDTO filtrados
            var idUsuariosEnProyecto = usuarioGruposEnProyecto.Select(ug => ug.IdUsuario).ToList();

            // 3. Filtra la lista de usuarios por los IdUsuario obtenidos
            usuariosRelacionados = listaUsuarios.Where(u => idUsuariosEnProyecto.Contains(u.IdUsuario)).ToList();
            _loader = false;

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
            _navManager.NavigateTo("/clientes/");
        }

        base.OnInitialized();
    }


    void OnSubmitTarea(EditContext editContext)
    {
        if (editContext.Validate())
        {
            if (Action.ToLower().Contains("agregar")) Agregar();
            else if (Action.ToLower().Contains("modificar")) Modificar();
            else if (Action.ToLower().Contains("eliminar")) Eliminar();
        }
        else
        {
            Snackbar.Add("Chequeé todos los campos", Severity.Warning);
        }
    }

    private async void Agregar()
    {
        try
        {
            // Crear una lista de UsuarioGrupoTareaDTO a partir de los usuarios seleccionados
            tareaDTO.UsuarioGrupoTareas = usuariosSeleccionados
            .Select(ugt => new UsuarioGrupoTareaDTO
                {
                    IdUsuario = ugt.IdUsuario,
                    IdGrupo = ObtenerIdGrupoPorProyecto(ugt, IdProyecto),
                    IdProyecto = IdProyecto,
                })
            .ToList();

            // Llama al servicio para agregar la tarea
            var response = await _tareaServicio.AgregarTarea(tareaDTO);

            if (response != null)
            {
                Snackbar.Add("Se agregó la tarea", Severity.Success);
                _navManager.NavigateTo($"/tareas/{IdProyecto}");
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private int ObtenerIdGrupoPorProyecto(UsuarioDTO usuario, int idProyecto)
    {
        // Asumo que UsuarioDTO tiene una propiedad GrupoDTOs que es la lista de grupos a los que pertenece el usuario
        var grupo = usuario.UsuarioGrupos.FirstOrDefault(g => g.IdProyecto == idProyecto);

        // Si encontramos el grupo, devolvemos su Id, de lo contrario, podrías manejar la situación de otra manera según tus necesidades.
        return grupo != null ? grupo.IdGrupo : 0; // Otra opción podría ser lanzar una excepción si no se encuentra el grupo.
    }

    private async void Modificar()
    {
        try
        {
            /*var response = await _tareaServicio.AgregarModificarTarea(IdTarea, tareaDTO);

            if (response != null)
            {
                Snackbar.Add("Se modificó la tarea", Severity.Success);
                _navManager.NavigateTo("/tareas/");
            }*/
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private async void Eliminar()
    {
        try
        {
            var response = await _tareaServicio.EliminarTarea(tareaDTO.IdTarea);
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }
}