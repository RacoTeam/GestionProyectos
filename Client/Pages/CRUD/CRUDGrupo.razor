@page "/Grupos/{action}/{IdGrupo:int}"

<PageTitle>Grupo</PageTitle>

@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations

@using CurrieTechnologies.Razor.SweetAlert2;
@using GestionProyectos.Shared.Models;
@using GestionProyectos.Client.Services.Contrato;

@inject IGrupoService _grupoServicio;
@inject IProyectoService _proyectoServicio;
@inject IRolService _rolServicio;

@inject NavigationManager _navManager;
@inject ISnackbar Snackbar;

@using GestionProyectos.Client.Shared.MultiSelectAutoComplete;

@if (Action.ToLower().Contains("agregar"))
{
    <EditForm Model="@grupoDTO" OnSubmit="OnSubmitGrupo" FormName="AgregarGrupoForm">
        <DataAnnotationsValidator />
        <MudGrid Justify="Justify.Center">
            <MudItem xs="12" sm="7">
                <MudPaper Class="pa-4">
                    <MudStack Spacing="3">
                        <MudText Typo="Typo.h4">Agregar Grupo</MudText>

                        <MudItem>
                            <MudTextField T="int" Label="IdProyecto" @bind-Value="grupoDTO.IdProyecto" For="@(() => grupoDTO.IdProyecto)" Variant="Variant.Outlined" />
                        </MudItem>

                        <MudItem>
                            <MudTextField T="string" Label="Nombre" @bind-Value="grupoDTO.Nombre" For="@(() => grupoDTO.Nombre)" Variant="Variant.Outlined" />
                        </MudItem>


                        <MudCardActions>
                            <MudButton ButtonType="ButtonType.Button" Href="/Grupos/" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Cancel" Color="Color.Error" Class="ml-auto">Cancelar</MudButton>
                            <MudButton ButtonType="ButtonType.Submit" Disabled="@_processing" Variant="Variant.Filled" Class="ml-auto" StartIcon="@Icons.Material.Filled.Save" Color="Color.Info">
                                @if (_processing)
                                {
                                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                                    <MudText Class="ms-2">Procesando</MudText>
                                }
                                else
                                {
                                    <MudText>Agregar Grupo</MudText>
                                }
                            </MudButton>
                        </MudCardActions>
                    </MudStack>
                </MudPaper>
                @* <ValidationSummary /> *@
            </MudItem>
        </MudGrid>
    </EditForm>
}

@if (Action.ToLower().Contains("modificar"))
{
    <EditForm Model="@grupoDTO" OnSubmit="OnSubmitGrupo" FormName="ModificarGrupoForm">
        <DataAnnotationsValidator />
        <MudGrid Justify="Justify.Center">
            <MudItem xs="12" sm="7">
                <MudPaper Class="pa-4">
                    <MudStack Spacing="3">
                        <MudText Typo="Typo.h4">Modificar Grupo</MudText>
                        <MudItem>
                            <MudTextField T="int" Label="IdProyecto" @bind-Value="grupoDTO.IdProyecto" For="@(() => grupoDTO.IdProyecto)" Variant="Variant.Outlined" />
                        </MudItem>

                        <MudItem>
                            <MudTextField T="string" Label="Nombre" @bind-Value="grupoDTO.Nombre" For="@(() => grupoDTO.Nombre)" Variant="Variant.Outlined" />
                        </MudItem>

                        <MudCardActions>
                            <MudButton ButtonType="ButtonType.Button" Href="/Grupos/" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Cancel" Color="Color.Error" Class="ml-auto">Cancelar</MudButton>
                            <MudButton ButtonType="ButtonType.Submit" Disabled="@(_loader || _processing)" Variant="Variant.Filled" Class="ml-auto" StartIcon="@Icons.Material.Filled.Save" Color="Color.Info">
                                @if (_processing)
                                {
                                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                                    <MudText Class="ms-2">Procesando</MudText>
                                }
                                else
                                {
                                    <MudText>Modificar Grupo</MudText>
                                }
                            </MudButton>
                        </MudCardActions>
                    </MudStack>
                </MudPaper>
                <MudItem xs="12" Class="text-center">
                    @if (_loader)
                    {
                        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                    }
                </MudItem>
                @* <ValidationSummary /> *@
            </MudItem>
        </MudGrid>
    </EditForm>
}

@if (Action.ToLower().Contains("eliminar"))
{
    <EditForm Model="@grupoDTO" OnSubmit="OnSubmitGrupo" FormName="ModificarGrupoForm">
        <DataAnnotationsValidator />
        <MudGrid Justify="Justify.Center">
            <MudItem xs="12" sm="7">
                <MudPaper Class="pa-4">
                    <MudStack Spacing="3">
                        <MudText Typo="Typo.h4">Eliminar Grupo</MudText>
                        <MudItem>
                            <MudTextField T="int" Label="IdProyecto" @bind-Value="grupoDTO.IdProyecto" For="@(() => grupoDTO.IdProyecto)" Variant="Variant.Outlined" />
                        </MudItem>

                        <MudItem>
                            <MudTextField T="string" Label="Nombre" @bind-Value="grupoDTO.Nombre" For="@(() => grupoDTO.Nombre)" Variant="Variant.Outlined" />
                        </MudItem>
                        <MudCardActions>
                            <MudButton ButtonType="ButtonType.Submit" Disabled="@(_loader || _processing)" Variant="Variant.Filled" Class="ml-auto" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error">
                                @if (_processing)
                                {
                                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                                    <MudText Class="ms-2">Procesando</MudText>
                                }
                                else
                                {
                                    <MudText>Eliminar Grupo</MudText>
                                }
                            </MudButton>
                            <MudButton ButtonType="ButtonType.Button" Href="/Grupos/" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Cancel" Color="Color.Info" Class="ml-auto">Cancelar</MudButton>
                        </MudCardActions>
                    </MudStack>
                </MudPaper>
                <MudItem xs="12" Class="text-center">
                    @if (_loader)
                    {
                        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                    }
                </MudItem>
                @* <ValidationSummary /> *@
            </MudItem>
        </MudGrid>
    </EditForm>
}



@code {
    private GrupoDTO grupoDTO = new GrupoDTO();

    [Parameter] public string Action { get; set; }
    [Parameter] public int IdGrupo { get; set; } = 0;

    string variable = "";

    private bool _processing = false;

    private bool _loader = false;

    //private bool _errorGrupo = false;

    private List<GrupoDTO> listaGrupos = new List<GrupoDTO>();
    private List<RolDTO> listaRoles = new List<RolDTO>();
    private List<ProyectoDTO> listaProyectos = new List<ProyectoDTO>();

    private bool _errorProyecto = false;

    private async Task<IEnumerable<ProyectoDTO>> SearchProyecto(string value)
    {
        await Task.Delay(5);
        return string.IsNullOrEmpty(value) ? listaProyectos : listaProyectos.Where(u => u.Nombre.Contains(value, StringComparison.OrdinalIgnoreCase) );
    }

    // private async Task<IEnumerable<GrupoDTO>> SearchGrupos(string value)
    // {
    //     await Task.Delay(5);
    //     return string.IsNullOrEmpty(value) ? listaGrupos : listaGrupos.Where(c => c.Nombre.Contains(value, StringComparison.OrdinalIgnoreCase));
    // }

    protected async override void OnInitialized()
    {
        _loader = true;
        if (Action.Contains("eliminar") || Action.Contains("modificar"))
        {
            try
            {
                grupoDTO = await _grupoServicio.ObtenerGrupo(IdGrupo);
                _loader = false;

                StateHasChanged();
            }
            catch (Exception ex)
            {
                Snackbar.Add(ex.Message, Severity.Error);
                _navManager.NavigateTo("/Grupos/");
            }
        }
        if (Action.Contains("agregar"))
        {
            try
            {
                listaProyectos = await _proyectoServicio.ListarProyectos();
            }
            catch (Exception ex)
            {
                Snackbar.Add(ex.Message, Severity.Error);
                _navManager.NavigateTo("/Grupos/");
            }
        }
            
        base.OnInitialized();
    }


    void OnSubmitGrupo(EditContext editContext)
    {
        if (editContext.Validate())
        {
            if (Action.ToLower().Contains("agregar")) AgregarGrupo();
            else if (Action.ToLower().Contains("modificar")) ModificarGrupo();
            else if (Action.ToLower().Contains("eliminar")) EliminarGrupo();
        }
        else
        {
            Snackbar.Add("Chequeé todos los campos", Severity.Warning);
        }
    }

    private async void AgregarGrupo()
    {
        try
        {
            var response = await _grupoServicio.AgregarGrupo(grupoDTO);

            if (response != null)
            {
                Snackbar.Add("Se agregó el Grupo", Severity.Success);
                _navManager.NavigateTo("/Grupos/");
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private async void ModificarGrupo()
    {
        try
        {
            var response = await _grupoServicio.AgregarModificarGrupo(IdGrupo, grupoDTO);

            if (response != null)
            {
                Snackbar.Add("Se modificó el Grupo", Severity.Success);
                _navManager.NavigateTo("/Grupos/");
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private async void EliminarGrupo()
    {
        try
        {
            var response = await _grupoServicio.EliminarGrupo(grupoDTO.IdGrupo);

            if (response != null)
            {
                Snackbar.Add("Se eliminó el Grupo", Severity.Success);
                _navManager.NavigateTo("/Grupos/");
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }
}