@page "/Grupos/{action}/{IdGrupo:int}"

<PageTitle>Grupo</PageTitle>

@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations

@using CG.Blazor.Forms
@using CurrieTechnologies.Razor.SweetAlert2;
@using GestionProyectos.Shared.Models;
@using Microsoft.AspNetCore.Components.Authorization
@using GestionProyectos.Client.Extensions;
@using GestionProyectos.Client.Services.Contrato;

@inject IGrupoService _grupoServicio;
@inject NavigationManager _navServicio;
@inject ISnackbar Snackbar;
@inject AuthenticationStateProvider autenticacionProvider;
@inject SweetAlertService Swal;
@* 
if varAgregar then
<DynamicForm Model="@GrupoDTO" OnValidSubmit="Agregar" />

if modificar then
<DynamicForm Model="@GrupoDTO" OnValidSubmit="Agregar" /> *@

<div>
    @variable
</div>

<DynamicForm Model="@GrupoDTO" OnValidSubmit="OnValidSubmit" />

@code{
    private GrupoDTO GrupoDTO = new GrupoDTO();
    private SesionDTO sesionGrupoDTO = new SesionDTO();

    [Parameter] public string Action { get; set; }
    [Parameter] public int IdGrupo { get; set; }

    string variable = "";

    protected override void OnInitialized()
    {
        if (Action.Contains("agregar"))
        {
            variable = Action;
        }
        else if (Action.Contains("eliminar"))
        {
            variable = Action;
        }
        else if (Action.Contains("modificar"))
        {
            variable = Action;
        }

        base.OnInitialized();
    }

    /*private MyModel model = new MyModel();
    
    [RenderValidationSummary()]
    [RenderFluentValidationValidator]
    public class MyModel
    {
        [RenderMudTextField()]
        [Required(ErrorMessage = "El campo {0} es requerido")]
        public string FirstName { get; set; }
        
        [RenderMudTextField(Placeholder = "enter something")]
        [Required(ErrorMessage = "El campo {0} es requerido")]
        public string LastName { get; set; }

        [Required(ErrorMessage = "El campo {0} es requerido")]
        [RenderMudDatePicker(Color = MudBlazor.Color.Secondary)]
        public DateTime? DateOfBirth { get; set; }
    }*/

    private async void OnValidSubmit(EditContext context)
    {
        Console.WriteLine("Correcto");
        // // Grupo.NombreGrupo = "Profe";
        // // Grupo.Clave = "1234";
        // // Grupo.IdGrupo = 4;
        // // Grupo.IdGrupo = 4;

        // // sesionGrupo.Grupo = "Administrador";
        // // sesionGrupo.NombreCompleto = "Profe";
        // // sesionGrupo.IdGrupo = 11;

        // if (GrupoDTO.NombreGrupo != null && GrupoDTO.Clave != null)
        // {
        //     var response = await _GrupoServicio.Buscar(GrupoDTO.Nombre, GrupoDTO.Clave);
        //     if (response is null)
        //     {
        //         Snackbar.Add("No se encuentra al Grupo, registrese y vuelva a intentar.", Severity.Error);
        //     }
        //     else
        //     {
        //         var autenticacionExt = (AutenticacionExtension)autenticacionProvider;
        //         await autenticacionExt.ActualizarEstadoAutenticacion(response);

        //         if (response.Grupo.ToLower() == "administrador")
        //         {
        //             //toastService.ShowSuccess("Inicio exitoso.");
        //             _navServicio.NavigateTo("/Grupos/Listado");
        //             Snackbar.Add("Inicio Exitoso", Severity.Info);
        //         }
        //         if (!(response.Grupo.ToLower() == "administrador"))
        //         {
        //             _navServicio.NavigateTo("/");
        //             Snackbar.Add("Inicio Exitoso", Severity.Info);
        //             //toastService.ShowSuccess("Inicio Sesion sin ser Administrador");
        //         }

        //         //await sessionStorage.SetItemAsync("id", Grupo.Id);
        //         //await JsRuntime.InvokeVoidAsync("location.reload");
        //     }
        // }
    }
}


@* @code {
    bool success;
    string[] errors = { };
    MudTextField<string> pwField1;
    MudForm form;

    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Password is required!";
            yield break;
        }
        if (pw.Length < 8)
            yield return "Password must be at least of length 8";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "Password must contain at least one capital letter";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "Password must contain at least one lowercase letter";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "Password must contain at least one digit";
    }

    private string PasswordMatch(string arg)
    {
        if (pwField1.Value != arg)
            return "Passwords don't match";
        return null;
    }

} *@