@page "/Proyectos/{action}/{IdProyecto:int}"

<PageTitle>Proyecto</PageTitle>

@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations

@using CurrieTechnologies.Razor.SweetAlert2;
@using GestionProyectos.Shared.Models;
@using GestionProyectos.Client.Services.Contrato;

@inject IProyectoService _proyectoServicio;
@inject IClienteService _clienteServicio;
@inject IUsuarioService _usuarioServicio;
@inject NavigationManager _navManager;
@inject ISnackbar Snackbar;

@using GestionProyectos.Client.Shared.MultiSelectAutoComplete;

@if (Action.ToLower().Contains("agregar"))
{
    <EditForm Model="@proyectoDTO" OnSubmit="OnSubmitProyecto" FormName="AgregarProyectoForm">
    <DataAnnotationsValidator/>
    <MudGrid Justify="Justify.Center">
        <MudItem xs="12" sm="7">
            <MudPaper Class="pa-4">
                <MudStack Spacing="3">
                    <MudText Typo="Typo.h4">Agregar Proyecto</MudText>
                    <MudItem>
                        <MudTextField T="string" Label="Nombre"  @bind-Value="proyectoDTO.Nombre" For="@(() => proyectoDTO.Nombre)" Variant="Variant.Outlined" />
                    </MudItem>
                    <MudItem>
                        <MudTextField T="string" Label="Descripción" @bind-Value="proyectoDTO.Descripcion" For="@(() => proyectoDTO.Descripcion)" Variant="Variant.Outlined" Lines="3" />
                    </MudItem>

                    <MudGrid>
                        <MudItem xs="6">
                            <MudDatePicker Label="Fecha de Inicio" Editable="true" @bind-Date="proyectoDTO.FechaInicio" For="@(() => proyectoDTO.FechaInicio)" Variant="Variant.Outlined" Placeholder="Selecciona una fecha" DisableToolbar="true" ShowWeekNumbers="true" />
                        </MudItem>
                        <MudItem xs="6">
                            <MudDatePicker Label="Fecha de Finalización" Editable="true" @bind-Date="proyectoDTO.FechaFin" For="@(() => proyectoDTO.FechaFin)" Variant="Variant.Outlined" Placeholder="Selecciona una fecha" DisableToolbar="true" ShowWeekNumbers="true" />
                        </MudItem>
                    </MudGrid> 

                    <MudGrid>
                        <MudItem xs="6">
                                <MudAutocomplete T="UsuarioDTO" Label="Usuario" Error="@_errorUsuario" @onclick="@(() => _errorUsuario = false)"
                                @bind-Value="proyectoDTO.IdUsuarioNavigation" For="@(() => proyectoDTO.IdUsuarioNavigation)"
                                 SearchFunc="@SearchUsuarios" ToStringFunc="@(u=> u==null?null : $"{u.Nombre} {u.Apellido} ({u.IdRolNavigation.Nombre})")">
                                <NoItemsTemplate>
                                    <MudText Align="Align.Center" Class="px-4 py-1">
                                        No se encontraron usuarios
                                    </MudText>
                                    <div class="pa-2">
                                        <MudButton Href="/Usuarios/agregar/0" Color="Color.Primary">Añadir Usuario</MudButton>
                                    </div>
                                </NoItemsTemplate>
                                <AfterItemsTemplate>
                                    <div class="pa-2">
                                        <MudButton Href="/Usuarios/agregar/0" Color="Color.Primary">Añadir Usuario</MudButton>
                                    </div>
                                </AfterItemsTemplate>
                            </MudAutocomplete>
                        </MudItem>

                        <MudItem xs="6">
                                <MudAutocomplete T="ClienteDTO" Label="Cliente" Error="@_errorCliente" @onclick="@(() => _errorCliente = false)"
                                @bind-Value="proyectoDTO.IdClienteNavigation" For="@(() => proyectoDTO.IdClienteNavigation)"
                                SearchFunc="@SearchClientes" ToStringFunc="@(u=> u==null?null : $"{u.Nombre}")">
                                <NoItemsTemplate>
                                    <MudText Align="Align.Center" Class="px-4 py-1">
                                        No se encontraron usuarios
                                    </MudText>
                                    <div class="pa-2">
                                        <MudButton Href="/Clientes/agregar/0" Color="Color.Primary">Añadir Cliente</MudButton>
                                    </div>
                                </NoItemsTemplate>
                                <AfterItemsTemplate>
                                    <div class="pa-2">
                                        <MudButton Href="/Clientes/agregar/0" Color="Color.Primary">Añadir Cliente</MudButton>
                                    </div>
                                </AfterItemsTemplate>
                            </MudAutocomplete>
                        </MudItem>
                    </MudGrid>

                    <MudCardActions>
                        <MudButton ButtonType="ButtonType.Button" Href="/Proyectos/" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Cancel" Color="Color.Error" Class="ml-auto">Cancelar</MudButton>
                        <MudButton ButtonType="ButtonType.Submit" Disabled="@_processing" Variant="Variant.Filled" Class="ml-auto" StartIcon="@Icons.Material.Filled.Save" Color="Color.Info">
                            @if (_processing)
                            {
                                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                                <MudText Class="ms-2">Procesando</MudText>
                            }
                            else
                            {
                                    <MudText>Agregar Proyecto</MudText>
                            }
                        </MudButton>
                    </MudCardActions>
                </MudStack>
            </MudPaper>
                @* <ValidationSummary /> *@
        </MudItem>
    </MudGrid>
    </EditForm>
}

@if (Action.ToLower().Contains("modificar"))
{
    <EditForm Model="@proyectoDTO" OnSubmit="OnSubmitProyecto" FormName="ModificarProyectoForm">
        <DataAnnotationsValidator />
        <MudGrid Justify="Justify.Center">
            <MudItem xs="12" sm="7">
                <MudPaper Class="pa-4">
                    <MudStack Spacing="3">
                        <MudText Typo="Typo.h4">Modificar Proyecto</MudText>
                        <MudItem>
                            <MudTextField T="string" Label="Nombre" @bind-Value="proyectoDTO.Nombre" For="@(() => proyectoDTO.Nombre)" Disabled="@_loader" Variant="Variant.Outlined" />
                        </MudItem>
                        <MudItem>
                            <MudTextField T="string" Label="Descripción" @bind-Value="proyectoDTO.Descripcion" For="@(() => proyectoDTO.Descripcion)" Disabled="@_loader" Variant="Variant.Outlined" Lines="3" />
                        </MudItem>

                        <MudGrid>
                            <MudItem xs="6">
                                <MudDatePicker Label="Fecha de Inicio" Editable="true" @bind-Date="proyectoDTO.FechaInicio" For="@(() => proyectoDTO.FechaInicio)" Disabled="@_loader" Variant="Variant.Outlined" Placeholder="Selecciona una fecha" DisableToolbar="true" ShowWeekNumbers="true" />
                            </MudItem>
                            <MudItem xs="6">
                                <MudDatePicker Label="Fecha de Finalización" Editable="true" @bind-Date="proyectoDTO.FechaFin" For="@(() => proyectoDTO.FechaFin)" Disabled="@_loader" Variant="Variant.Outlined" Placeholder="Selecciona una fecha" DisableToolbar="true" ShowWeekNumbers="true" />
                            </MudItem>
                        </MudGrid>

                        <MudGrid>
                            <MudItem xs="6">
                                <MudAutocomplete T="UsuarioDTO" Label="Usuario" Error="@_errorUsuario" @onclick="@(() => _errorUsuario = false)" @bind-Value="proyectoDTO.IdUsuarioNavigation" For="@(() => proyectoDTO.IdUsuarioNavigation)"
                                                 Disabled="@_loader"
                                                 SearchFunc="@SearchUsuarios" ToStringFunc="@(u=> u==null?null : $"{u.Nombre} {u.Apellido} ({(u.IdRolNavigation?.Nombre != null ? u.IdRolNavigation?.Nombre : "Sin Rol")})")">
                                    <NoItemsTemplate>
                                        <MudText Align="Align.Center" Class="px-4 py-1">
                                            No se encontraron usuarios
                                        </MudText>
                                        <div class="pa-2">
                                            <MudButton Href="/Usuarios/agregar/0" Color="Color.Primary">Añadir Usuario</MudButton>
                                        </div>
                                    </NoItemsTemplate>
                                    <AfterItemsTemplate>
                                        <div class="pa-2">
                                            <MudButton Href="/Usuarios/agregar/0" Color="Color.Primary">Añadir Usuario</MudButton>
                                        </div>
                                    </AfterItemsTemplate>
                                </MudAutocomplete>
                            </MudItem>

                            <MudItem xs="6">
                                <MudAutocomplete T="ClienteDTO" Label="Cliente" Error="@_errorCliente" @onclick="@(() => _errorCliente = false)" @bind-Value="proyectoDTO.IdClienteNavigation" For="@(() => proyectoDTO.IdClienteNavigation)"
                                                 Disabled="@_loader"
                                                 SearchFunc="@SearchClientes" ToStringFunc="@(c=> c==null?null : $"{c.Nombre}")">
                                    <NoItemsTemplate>
                                        <MudText Align="Align.Center" Class="px-4 py-1">
                                            No se encontraron usuarios
                                        </MudText>
                                        <div class="pa-2">
                                            <MudButton Href="/Clientes/agregar/0" Color="Color.Primary">Añadir Cliente</MudButton>
                                        </div>
                                    </NoItemsTemplate>
                                    <AfterItemsTemplate>
                                        <div class="pa-2">
                                            <MudButton Href="/Clientes/agregar/0" Color="Color.Primary">Añadir Cliente</MudButton>
                                        </div>
                                    </AfterItemsTemplate>
                                </MudAutocomplete>
                            </MudItem>
                        </MudGrid>

                        <MudCardActions>
                            <MudButton ButtonType="ButtonType.Button" Href="/Proyectos/" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Cancel" Color="Color.Error" Class="ml-auto">Cancelar</MudButton>
                            <MudButton ButtonType="ButtonType.Submit" Disabled="@(_loader || _processing)" Variant="Variant.Filled" Class="ml-auto" StartIcon="@Icons.Material.Filled.Save" Color="Color.Info">
                                @if (_processing)
                                {
                                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                                    <MudText Class="ms-2">Procesando</MudText>
                                }
                                else
                                {
                                    <MudText>Modificar Proyecto</MudText>
                                }
                            </MudButton>
                        </MudCardActions>
                    </MudStack>
                </MudPaper>
                <MudItem xs="12" Class="text-center">
                    @if (_loader)
                    {
                        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                    }
                </MudItem>
                @* <ValidationSummary /> *@
            </MudItem>
        </MudGrid>
    </EditForm>
}

@code{
    private ProyectoDTO proyectoDTO = new ProyectoDTO();

    [Parameter] public string Action { get; set; }
    [Parameter] public int IdProyecto { get; set; } = 0;

    string variable = "";

    private bool _processing = false;

    private bool _loader = false;

    private bool _errorUsuario = false;
    private bool _errorCliente = false;

    private List<UsuarioDTO> listaUsuarios = new List<UsuarioDTO>();
    private List<ClienteDTO> listaClientes = new List<ClienteDTO>();

    private async Task<IEnumerable<UsuarioDTO>> SearchUsuarios(string value)
    {
        await Task.Delay(5);
        return string.IsNullOrEmpty(value) ? listaUsuarios : listaUsuarios.Where(u => u.Nombre.Contains(value, StringComparison.OrdinalIgnoreCase) || u.Apellido.Contains(value, StringComparison.OrdinalIgnoreCase) || u.IdRolNavigation.Nombre.Contains(value, StringComparison.OrdinalIgnoreCase));
    }

    private async Task<IEnumerable<ClienteDTO>> SearchClientes(string value)
    {
        await Task.Delay(5);
        return string.IsNullOrEmpty(value) ? listaClientes : listaClientes.Where(c => c.Nombre.Contains(value, StringComparison.OrdinalIgnoreCase));
    }

    protected async override void OnInitialized()
    {
        if (Action.Contains("agregar") || Action.Contains("modificar"))
        {
            _loader = true;
            try
            {
                listaUsuarios = await _usuarioServicio.ListarUsuarios();
                listaClientes = await _clienteServicio.ListarClientes();
            }
            catch (Exception ex)
            {
                Snackbar.Add(ex.Message, Severity.Error);
            }

            if (Action.Contains("modificar"))
            {
                try
                {
                    proyectoDTO = await _proyectoServicio.ObtenerProyecto(IdProyecto);

                    proyectoDTO.IdClienteNavigation = null;
                    proyectoDTO.IdUsuarioNavigation= null;

                    // if (proyectoDTO.IdUsuario.HasValue){
                    //     proyectoDTO.IdUsuarioNavigation = await _usuarioServicio.ObtenerUsuario(proyectoDTO.IdUsuario.Value); ;
                    // }

                    _loader = false;

                    StateHasChanged();
                }
                catch
                {
                    Snackbar.Add("No se logró obtener el proyecto", Severity.Error);
                    _navManager.NavigateTo("/proyectos/");
                }
            }
        }

        base.OnInitialized();
    }


    void OnSubmitProyecto(EditContext editContext)
    {
        if (proyectoDTO.IdUsuarioNavigation != null && proyectoDTO.IdClienteNavigation != null)
        {
            proyectoDTO.IdUsuario = proyectoDTO.IdUsuarioNavigation.IdUsuario;
            proyectoDTO.IdCliente = proyectoDTO.IdClienteNavigation.IdCliente;

            if (editContext.Validate())
            {
                if (Action.ToLower().Contains("agregar")) Agregar();
                else if (Action.ToLower().Contains("modificar")) Modificar();
                else if (Action.ToLower().Contains("eliminar")) Eliminar();
            }
            else
            {
                Snackbar.Add("Chequeé todos los campos", Severity.Warning);
            }
        }
        else if(proyectoDTO.IdUsuarioNavigation == null)
        {
            _errorUsuario = true;
            Snackbar.Add("Chequeé el campo de Usuario", Severity.Warning);
        }
        else if (proyectoDTO.IdClienteNavigation == null)
        {
            _errorCliente = true;
            Snackbar.Add("Chequeé el campo de Cliente", Severity.Warning);
        }
    }

    private async void Agregar()
    {
        try
        {
            var response = await _proyectoServicio.AgregarProyecto(proyectoDTO);

            if (response != null)
            {
                Snackbar.Add("Se agregó el proyecto", Severity.Success);
                _navManager.NavigateTo("/proyectos/");
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private async void Modificar()
    {
        try
        {
            var response = await _proyectoServicio.AgregarModificarProyecto(IdProyecto, proyectoDTO);

            if (response != null)
            {
                Snackbar.Add("Se modificó el proyecto", Severity.Success);
                _navManager.NavigateTo("/proyectos/");
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private async void Eliminar()
    {
        try
        {
            var response = await _proyectoServicio.EliminarProyecto(proyectoDTO.IdProyecto);
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }
}