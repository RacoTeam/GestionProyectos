@page "/Recursos/{action}/{IdRecurso:int}"

<PageTitle>Recurso</PageTitle>

@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations

@using CurrieTechnologies.Razor.SweetAlert2;
@using GestionProyectos.Shared.Models;
@using GestionProyectos.Client.Services.Contrato;

@inject IRecursoService _recursoServicio;
@inject NavigationManager _navManager;
@inject ISnackbar Snackbar;

@using GestionProyectos.Client.Shared.MultiSelectAutoComplete;

@if (Action.ToLower().Contains("agregar"))
{
    <EditForm Model="@RecursoDTOs" OnSubmit="OnSubmitRecurso" FormName="AgregarRecursoForm">
        <DataAnnotationsValidator />
        <MudGrid Justify="Justify.Center">
            <MudItem xs="12" sm="7">
                <MudPaper Class="pa-4">
                    <MudStack Spacing="3">
                        <MudText Typo="Typo.h4">Agregar Recurso</MudText>
                        <MudItem>
                            <MudTextField T="string" Label="Nombre" @bind-Value="RecursoDTOs.Nombre" For="@(() => RecursoDTOs.Nombre)" Variant="Variant.Outlined" />
                        </MudItem>
                         <MudItem>
                            <MudTextField T="double?" Label="CostoDia" @bind-Value="RecursoDTOs.CostoDia" For="@(() => RecursoDTOs.CostoDia)" Variant="Variant.Outlined" />
                        </MudItem>
                        <MudItem>
                            <MudTextField T="string" Label="Tipo" @bind-Value="RecursoDTOs.Tipo" For="@(() => RecursoDTOs.Tipo)" Variant="Variant.Outlined" />
                        </MudItem>
                        <MudItem>
                            <MudTextField T="int?" Label="IdTarea" @bind-Value="RecursoDTOs.IdTarea" For="@(() => RecursoDTOs.IdTarea)" Variant="Variant.Outlined" />
                        </MudItem>

                        <MudCardActions>
                            <MudButton ButtonType="ButtonType.Button" Href="/Recursos/" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Cancel" Color="Color.Error" Class="ml-auto">Cancelar</MudButton>
                            <MudButton ButtonType="ButtonType.Submit" Disabled="@_processing" Variant="Variant.Filled" Class="ml-auto" StartIcon="@Icons.Material.Filled.Save" Color="Color.Info">
                                @if (_processing)
                                {
                                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                                    <MudText Class="ms-2">Procesando</MudText>
                                }
                                else
                                {
                                    <MudText>Agregar Recurso</MudText>
                                }
                            </MudButton>
                        </MudCardActions>
                    </MudStack>
                </MudPaper>
                 <ValidationSummary /> 
            </MudItem>
        </MudGrid>
    </EditForm>
}

@if (Action.ToLower().Contains("modificar"))
{
    <EditForm Model="@RecursoDTOs" OnSubmit="OnSubmitRecurso" FormName="ModificarRecursoForm">
        <DataAnnotationsValidator />
        <MudGrid Justify="Justify.Center">
            <MudItem xs="12" sm="7">
                <MudPaper Class="pa-4">
                    <MudStack Spacing="3">
                        <MudText Typo="Typo.h4">Modificar Recurso</MudText>
                        <MudItem>
                            <MudTextField T="string" Label="Nombre" @bind-Value="RecursoDTOs.Nombre" For="@(() => RecursoDTOs.Nombre)" Disabled="@_loader" Variant="Variant.Outlined" />
                        </MudItem>
                         <MudItem>
                            <MudTextField T="double?" Label="CostoDia" @bind-Value="RecursoDTOs.CostoDia" For="@(() => RecursoDTOs.CostoDia)" Variant="Variant.Outlined" />
                        </MudItem>
                        <MudItem>
                            <MudTextField T="string" Label="Tipo" @bind-Value="RecursoDTOs.Tipo" For="@(() => RecursoDTOs.Tipo)" Variant="Variant.Outlined" />
                        </MudItem>
                        <MudItem>
                            <MudTextField T="int?" Label="IdTarea" @bind-Value="RecursoDTOs.IdTarea" For="@(() => RecursoDTOs.IdTarea)" Variant="Variant.Outlined" />
                        </MudItem>


                        <MudCardActions>
                            <MudButton ButtonType="ButtonType.Button" Href="/Recursos/" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Cancel" Color="Color.Error" Class="ml-auto">Cancelar</MudButton>
                            <MudButton ButtonType="ButtonType.Submit" Disabled="@(_loader || _processing)" Variant="Variant.Filled" Class="ml-auto" StartIcon="@Icons.Material.Filled.EditNote" Color="Color.Info">
                                @if (_processing)
                                {
                                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                                    <MudText Class="ms-2">Procesando</MudText>
                                }
                                else
                                {
                                    <MudText>Modificar Recurso</MudText>
                                }
                            </MudButton>
                        </MudCardActions>
                    </MudStack>
                </MudPaper>
                <MudItem xs="12" Class="text-center">
                    @if (_loader)
                    {
                        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                    }
                </MudItem>
                @* <ValidationSummary /> *@
            </MudItem>
        </MudGrid>
    </EditForm>
}

@if (Action.ToLower().Contains("eliminar"))
{
    <EditForm Model="@RecursoDTOs" OnSubmit="OnSubmitRecurso" FormName="ModificarRecursoForm">
        <DataAnnotationsValidator />
        <MudGrid Justify="Justify.Center">
            <MudItem xs="12" sm="7">
                <MudPaper Class="pa-4">
                    <MudStack Spacing="3">
                        <MudText Typo="Typo.h4">Eliminar Recurso</MudText>
                        <MudItem>
                            <MudTextField T="string" Label="Nombre" @bind-Value="RecursoDTOs.Nombre" For="@(() => RecursoDTOs.Nombre)" ReadOnly="true" Variant="Variant.Outlined" />
                        </MudItem>
                         <MudItem>
                            <MudTextField T="double?" Label="CostoDia" @bind-Value="RecursoDTOs.CostoDia" For="@(() => RecursoDTOs.CostoDia)" Variant="Variant.Outlined" />
                        </MudItem>
                        <MudItem>
                            <MudTextField T="string" Label="Tipo" @bind-Value="RecursoDTOs.Tipo" For="@(() => RecursoDTOs.Tipo)" Variant="Variant.Outlined" />
                        </MudItem>
                        <MudItem>
                            <MudTextField T="int?" Label="IdTarea" @bind-Value="RecursoDTOs.IdTarea" For="@(() => RecursoDTOs.IdTarea)" Variant="Variant.Outlined" />
                        </MudItem>

                        <MudCardActions>
                            <MudButton ButtonType="ButtonType.Submit" Disabled="@(_loader || _processing)" Variant="Variant.Filled" Class="ml-auto" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error">
                                @if (_processing)
                                {
                                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                                    <MudText Class="ms-2">Procesando</MudText>
                                }
                                else
                                {
                                    <MudText>Eliminar Recurso</MudText>
                                }
                            </MudButton>
                            <MudButton ButtonType="ButtonType.Button" Href="/Recursos/" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Cancel" Color="Color.Info" Class="ml-auto">Cancelar</MudButton>
                        </MudCardActions>
                    </MudStack>
                </MudPaper>
                <MudItem xs="12" Class="text-center">
                    @if (_loader)
                    {
                        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                    }
                </MudItem>
                @* <ValidationSummary /> *@
            </MudItem>
        </MudGrid>
    </EditForm>
}

@* <MultiSelectAutoComplete T="TestItem" @bind-Values="SelectedGrupos"
                         SearchFunc="MySearchFunc"
                         GetIDFunc="c => c.Id" GetNameFunc="c => c.DisplayName" /> *@

@code {
    private RecursoDTO RecursoDTOs = new RecursoDTO();

    [Parameter] public string Action { get; set; }
    [Parameter] public int IdRecurso { get; set; } = 0;

    string variable = "";

    private bool _processing = false;

    private bool _loader = false;

    private List<RecursoDTO> listaRecursos = new List<RecursoDTO>();


    protected async override void OnInitialized()
    {
        _loader = true;
        if (Action.Contains("eliminar") || Action.Contains("modificar"))
        {
            try
            {
                RecursoDTOs = await _recursoServicio.ObtenerRecurso(IdRecurso);
                _loader = false;

                StateHasChanged();
            }
            catch (Exception ex)
            {
                Snackbar.Add(ex.Message, Severity.Error);
                _navManager.NavigateTo("/Recursos/");
            }
        }

        base.OnInitialized();
    }

    void OnSubmitRecurso(EditContext editContext)
    {
        if (editContext.Validate())
        {
            if (Action.ToLower().Contains("agregar")) Agregar();
            else if (Action.ToLower().Contains("modificar")) Modificar();
            else if (Action.ToLower().Contains("eliminar")) Eliminar();
        }
        else
        {
            Snackbar.Add("Chequeé todos los campos", Severity.Warning);
        }
    }

    private async void Agregar()
    {
        try
        {
            var response = await _recursoServicio.AgregarRecurso(RecursoDTOs);

            if (response != null)
            {
                Snackbar.Add("Se agregó el Recurso", Severity.Success);
                _navManager.NavigateTo("/Recursos/");
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private async void Modificar()
    {
        try
        {
            var response = await _recursoServicio.AgregarModificarRecurso(IdRecurso, RecursoDTOs);

            if (response != null)
            {
                Snackbar.Add("Se modificó el Recurso", Severity.Success);
                _navManager.NavigateTo("/Recursos/");
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"No se pudo modificar el Recurso: {ex.Message}", Severity.Error);
        }
    }

    private async void Eliminar()
    {
        try
        {
            var response = await _recursoServicio.EliminarRecurso(RecursoDTOs.IdRecurso);
            if (response)
            {
                Snackbar.Add("Se eliminó el Recurso", Severity.Success);
                _navManager.NavigateTo("/Recursos/");
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"No se pudo eliminar el Recurso: {ex.Message}", Severity.Error);
        }
    }
}