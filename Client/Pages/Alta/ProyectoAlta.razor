@page "/Proyecto/create/"
@inject HttpClient Http

@using GestionProyectos.Client.Services.Contrato;
@using GestionProyectos.Shared.Models;

@inject NavigationManager NavigationManager

@inject IProyectoService _proyectoServicio;

@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations

<MudGrid>
    <MudItem xs="12" sm="7">
        <MudPaper Class="pa-4">
            <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
                <MudTextField T="string" Label="Nombre" Required="true" RequiredError="Nombre requerido!" @bind-Value="@proyecto.Nombre"/>
                <MudTextField T="string" Label="Descripcion" Required="true" RequiredError="Descripcion requerida!" @bind-Value="@proyecto.Descripcion" />
                <MudTextField T="DateTime?" Label="Fecha de Inicio" Required="true" RequiredError="Fecha de Inicio requerida!" @bind-Value="@proyecto.FechaInicio" />
                <MudTextField T="DateTime?" Label="Fecha de Fin" Required="true" RequiredError="Fecha de Fin requerida!" @bind-Value="@proyecto.FechaFin" />
                <MudTextField T="int?" Label="Id Cliente" Required="true" RequiredError="Id Cliente requerido!" @bind-Value="@proyecto.IdCliente" />
                <MudTextField T="int?" Label="Id Responsabl" Required="true" RequiredError="Id Responsable requerido!" @bind-Value="@proyecto.IdUsuario" />

                @* TODO:Asignar Grupos *@
                @* TODO:Asignar Tareas *@

                <div class="d-flex align-center justify-space-between">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!success)" Class="ml-auto">Aceptar</MudButton>
                </div>

            </MudForm>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    MudForm form;


    [Parameter]
    public int proyectoId { get; set; }
    ProyectoDTO proyecto = new ProyectoDTO();



    bool success;
    string[] errors = { };
    MudTextField<string> pwField1;

    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Password is required!";
            yield break;
        }
        if (pw.Length < 8)
            yield return "Password must be at least of length 8";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "Password must contain at least one capital letter";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "Password must contain at least one lowercase letter";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "Password must contain at least one digit";
    }

    private string PasswordMatch(string arg)
    {
        if (pwField1.Value != arg)
            return "Passwords don't match";
        return null;
    }
}
